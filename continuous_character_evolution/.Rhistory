architecture1 <- matrix(c(1, 2, 2, 7, 7, 1, 1, 1, 0, 0, 5, 8, 8, 4, 4, 20, 30, 30, 19, 19, 194, 180, 180, 191, 191), nrow = 5, ncol = 5)
rownames(architecture1) <- c("English", "Greek sat", "Greek verb", "French sat", "French verb")
colnames(architecture1) <- c("0", "LC", "LS", "TC", "TS")
architecture1
architecture1 <- matrix(c(194, 180, 180, 191, 191, 20, 30, 30, 19, 19, 5, 8, 8, 4, 4, 1, 1, 1, 0, 0, 1, 2, 2, 7, 7), nrow = 5, ncol = 5)
rownames(architecture1) <- c("English", "Greek sat", "Greek verb", "French sat", "French verb")
colnames(architecture1) <- c("0", "LC", "LS", "TC", "TS")
architecture1
chisq.test(architecture1)
architecture12 <- architecture1[,-3]
architecture13 <- architecture12[,-3]
architecture14 <- architecture13[,-3]
architecture14
chisq.test(architecture14)
architecture2 <- matrix(c(178, 137, 137, 146, 146, 16, 43, 43, 45, 45, 20, 30, 30, 19, 19, 5, 8, 8, 3, 3, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 2, 2, 7, 7), nrow = 5, ncol = 7)
rownames(architecture2) <- c("English", "Greek sat", "Greek verb", "French sat", "French verb")
colnames(architecture2) <- c("PM0", "PMX", "PMS+PS", "PM0+PM1", "PMX+PM1rel","PM0+PMS+PS", "0")
architecture2
chisq.test(architecture2)
architecture22 <- architecture2[,-4]
architecture23 <- architecture22[,-4]
architecture24 <- architecture23[,-4]
architecture24
architecture25 <- architecture24[,-4]
architecture25
chisq.test(architecture25)
# setup
library(ape)
# for birthdeath.tree
library(geiger)
# Let's generate some random trees
numtips = 50
coalescent_tree = rcoal(numtips, br="coalescent")
plot(coalescent_tree)
title("Random coalescent tree")
runif_tree = rtree(numtips)
plot(runif_tree)
title("Random uniform tree")
# make branch lengths Grafen
rgraf_tree = compute.brlen(runif_tree, method="Grafen")
plot(rgraf_tree)
title("Random tree with Grafen branch lengths")
# Simulate trees under the Yule (pure-birth) process
birthrate = 1
deathrate = 0
yuletree = birthdeath.tree(b=birthrate, d=deathrate, taxa.stop=numtips)
plot(yuletree)
title("Tree simulated under the pure-birth process")
# Simulate trees under the Yule (pure-birth) process
birthrate = 1
deathrate = 0
yuletree = birthdeath.tree(b=birthrate, d=deathrate, taxa.stop=numtips)
plot(yuletree)
title("Tree simulated under the pure-birth process")
# Simulate trees under the Yule (pure-birth) process
birthrate = 1
deathrate = 0
yuletree = birthdeath.tree(b=birthrate, d=deathrate, taxa.stop=numtips)
plot(yuletree)
title("Tree simulated under the pure-birth process")
# the bdtree contains extinct ("fossil") lineages, which means it's not
# ultrametric.  So we'll do Grafen branch lengths again.  NOTE: DON'T
# DO THIS AT HOME, IT IS PRETTY MEANINGLESS EVEN AS A SIMULATION,
# THIS IS JUST A "FOR INSTANCE" TO SHOW HOW THE CODE WORKS
bdtree2 = compute.brlen(bdtree, method="Grafen")
plot(bdtree2)
title("Tree simulated under the birth-death process, and arbitrarily changing\nthe branch lengths using Grafen method to make ultrametric")
# the bdtree contains extinct ("fossil") lineages, which means it's not
# ultrametric.  So we'll do Grafen branch lengths again.  NOTE: DON'T
# DO THIS AT HOME, IT IS PRETTY MEANINGLESS EVEN AS A SIMULATION,
# THIS IS JUST A "FOR INSTANCE" TO SHOW HOW THE CODE WORKS
bdtree2 = compute.brlen(bdtree, method="Grafen")
plot(bdtree2)
title("Tree simulated under the birth-death process, and arbitrarily changing\nthe branch lengths using Grafen method to make ultrametric")
# the bdtree contains extinct ("fossil") lineages, which means it's not
# ultrametric.  So we'll do Grafen branch lengths again.  NOTE: DON'T
# DO THIS AT HOME, IT IS PRETTY MEANINGLESS EVEN AS A SIMULATION,
# THIS IS JUST A "FOR INSTANCE" TO SHOW HOW THE CODE WORKS
bdtree2 = compute.brlen(bdtree, method="Grafen")
plot(bdtree2)
title("Tree simulated under the birth-death process, and arbitrarily changing\nthe branch lengths using Grafen method to make ultrametric")
# the bdtree contains extinct ("fossil") lineages, which means it's not
# ultrametric.  So we'll do Grafen branch lengths again.  NOTE: DON'T
# DO THIS AT HOME, IT IS PRETTY MEANINGLESS EVEN AS A SIMULATION,
# THIS IS JUST A "FOR INSTANCE" TO SHOW HOW THE CODE WORKS
bdtree2 = compute.brlen(bdtree, method="Grafen")
plot(bdtree2)
title("Tree simulated under the birth-death process, and arbitrarily changing\nthe branch lengths using Grafen method to make ultrametric")
# branching times determined by coalescent process (nodes pushed towards tips)
coalescent_tree = rcoal(numtips, br="coalescent")
plot(coalescent_tree)
title("Random coalescent tree")
# branching times under a uniform distribution (non-ultrametric)
runif_tree = rtree(numtips)
plot(runif_tree)
title("Random uniform tree")
# make branch lengths Grafen
rgraf_tree = compute.brlen(runif_tree, method="Grafen")
plot(rgraf_tree)
title("Random tree with Grafen branch lengths")
# branching times under a uniform distribution (non-ultrametric)
runif_tree = rtree(numtips)
plot(runif_tree)
title("Random uniform tree")
# make branch lengths Grafen
rgraf_tree = compute.brlen(runif_tree, method="Grafen")
plot(rgraf_tree)
title("Random tree with Grafen branch lengths")
rgraf_tree2 <- ladderize(rgraf_tree)
plot(rgraf_tree2)
rgraf_tree2 <- ladderize(rgraf_tree, right = FALSE)
plot(rgraf_tree2)
# branching times under a uniform distribution (non-ultrametric)
runif_tree = rtree(numtips)
plot(runif_tree)
title("Random uniform tree")
# make branch lengths Grafen
rgraf_tree = compute.brlen(runif_tree, method="Grafen")
plot(rgraf_tree)
title("Random tree with Grafen branch lengths")
rgraf_tree2 <- ladderize(rgraf_tree, right = FALSE)
plot(rgraf_tree2)
# branching times under a uniform distribution (non-ultrametric)
runif_tree = rtree(numtips)
plot(runif_tree)
title("Random uniform tree")
# make branch lengths Grafen
rgraf_tree = compute.brlen(runif_tree, method="Grafen")
plot(rgraf_tree)
title("Random tree with Grafen branch lengths")
rgraf_tree2 <- ladderize(rgraf_tree, right = FALSE)
plot(rgraf_tree2)
# branching times under a uniform distribution (non-ultrametric)
runif_tree = rtree(numtips)
plot(runif_tree)
title("Random uniform tree")
# make branch lengths Grafen
rgraf_tree = compute.brlen(runif_tree, method="Grafen")
plot(rgraf_tree)
title("Random tree with Grafen branch lengths")
rgraf_tree2 <- ladderize(rgraf_tree, right = FALSE)
plot(rgraf_tree2)
# Simulate trees under the Yule (pure-birth) process
birthrate = 1
deathrate = 0
yuletree = birthdeath.tree(b=birthrate, d=deathrate, taxa.stop=numtips)
plot(yuletree)
title("Tree simulated under the pure-birth process")
# Simulate trees under the Yule (pure-birth) process
birthrate = 1
deathrate = 0
yuletree = birthdeath.tree(b=birthrate, d=deathrate, taxa.stop=numtips)
plot(yuletree)
title("Tree simulated under the pure-birth process")
# the bdtree contains extinct ("fossil") lineages, which means it's not
# ultrametric.  So we'll do Grafen branch lengths again.  NOTE: DON'T
# DO THIS AT HOME, IT IS PRETTY MEANINGLESS EVEN AS A SIMULATION,
# THIS IS JUST A "FOR INSTANCE" TO SHOW HOW THE CODE WORKS
bdtree2 = compute.brlen(bdtree, method="Grafen")
plot(bdtree2)
title("Tree simulated under the birth-death process, and arbitrarily changing\nthe branch lengths using Grafen method to make ultrametric")
bdtree3 <- ladderize(bdtree2, right = FALSE)
plot(bdtree3)
# the bdtree contains extinct ("fossil") lineages, which means it's not
# ultrametric.  So we'll do Grafen branch lengths again.  NOTE: DON'T
# DO THIS AT HOME, IT IS PRETTY MEANINGLESS EVEN AS A SIMULATION,
# THIS IS JUST A "FOR INSTANCE" TO SHOW HOW THE CODE WORKS
bdtree2 = compute.brlen(bdtree, method="Grafen")
plot(bdtree2)
title("Tree simulated under the birth-death process, and arbitrarily changing\nthe branch lengths using Grafen method to make ultrametric")
bdtree3 <- ladderize(bdtree2, right = FALSE)
plot(bdtree3)
# Simulate trees under the birth-death process
# NOTE: Birth-death trees sometimes die out by accident.
# So, re-run the code several times until you get a tree
# that actually gets up to 20 taxa.
birthrate = 1
deathrate = 0.5
bdtree = birthdeath.tree(b=birthrate, d=deathrate, taxa.stop=numtips)
plot(bdtree)
title("Tree simulated under the birth-death process")
# the bdtree contains extinct ("fossil") lineages, which means it's not
# ultrametric.  So we'll do Grafen branch lengths again.  NOTE: DON'T
# DO THIS AT HOME, IT IS PRETTY MEANINGLESS EVEN AS A SIMULATION,
# THIS IS JUST A "FOR INSTANCE" TO SHOW HOW THE CODE WORKS
bdtree2 = compute.brlen(bdtree, method="Grafen")
plot(bdtree2)
title("Tree simulated under the birth-death process, and arbitrarily changing\nthe branch lengths using Grafen method to make ultrametric")
bdtree3 <- ladderize(bdtree2, right = FALSE)
plot(bdtree3)
# Simulate trees under the birth-death process
# NOTE: Birth-death trees sometimes die out by accident.
# So, re-run the code several times until you get a tree
# that actually gets up to 20 taxa.
birthrate = 1
deathrate = 0.5
bdtree = birthdeath.tree(b=birthrate, d=deathrate, taxa.stop=numtips)
plot(bdtree)
title("Tree simulated under the birth-death process")
# the bdtree contains extinct ("fossil") lineages, which means it's not
# ultrametric.  So we'll do Grafen branch lengths again.  NOTE: DON'T
# DO THIS AT HOME, IT IS PRETTY MEANINGLESS EVEN AS A SIMULATION,
# THIS IS JUST A "FOR INSTANCE" TO SHOW HOW THE CODE WORKS
bdtree2 = compute.brlen(bdtree, method="Grafen")
plot(bdtree2)
title("Tree simulated under the birth-death process, and arbitrarily changing\nthe branch lengths using Grafen method to make ultrametric")
bdtree3 <- ladderize(bdtree2, right = FALSE)
plot(bdtree3)
# Simulate trees under the birth-death process
# NOTE: Birth-death trees sometimes die out by accident.
# So, re-run the code several times until you get a tree
# that actually gets up to 20 taxa.
birthrate = 1
deathrate = 0.5
bdtree = birthdeath.tree(b=birthrate, d=deathrate, taxa.stop=numtips)
plot(bdtree)
title("Tree simulated under the birth-death process")
# the bdtree contains extinct ("fossil") lineages, which means it's not
# ultrametric.  So we'll do Grafen branch lengths again.  NOTE: DON'T
# DO THIS AT HOME, IT IS PRETTY MEANINGLESS EVEN AS A SIMULATION,
# THIS IS JUST A "FOR INSTANCE" TO SHOW HOW THE CODE WORKS
bdtree2 = compute.brlen(bdtree, method="Grafen")
plot(bdtree2)
title("Tree simulated under the birth-death process, and arbitrarily changing\nthe branch lengths using Grafen method to make ultrametric")
bdtree3 <- ladderize(bdtree2, right = FALSE)
plot(bdtree3)
bdtree3 <- ladderize(bdtree2, right = TRUR)
plot(bdtree3)
bdtree3 <- ladderize(bdtree2, right = TRUE)
plot(bdtree3)
bdtree2 = compute.brlen(bdtree, 1)
plot(bdtree2)
title("Tree simulated under the birth-death process, and arbitrarily changing\nthe branch lengths using Grafen method to make ultrametric")
bdtree2 = compute.brlen(bdtree, 2)
plot(bdtree2)
title("Tree simulated under the birth-death process, and arbitrarily changing\nthe branch lengths using Grafen method to make ultrametric")
bdtree3 = compute.brlen(bdtree2, method="Grafen")
plot(bdtree3)
£540.31/2
540.31/2
.48*.32*.38
4/0.058368
446-27
419/2
6000*1.5
6000*0.015
library(geiger)
geo=get(data(geospiza))
tmp=treedata(geo$phy, geo$dat)
phy=tmp$phy
dat=tmp$data
#---- STORE RESULTS
brownFit <-  fitContinuous(phy, dat[,"wingL"], SE=NA, control=list(niter=50), ncores=2)
brownFit
summary(brownFit)
# Simulated dataset
set.seed(14)
# Generating a random tree
tree<-pbtree(n=50)
# Setting the regime states of tip species
sta<-as.vector(c(rep("Forest",20),rep("Savannah",30))); names(sta)<-tree$tip.label
# Making the simmap tree with mapped states
tree<-make.simmap(tree,sta , model="ER", nsim=1)
col<-c("blue","orange"); names(col)<-c("Forest","Savannah")
# Plot of the phylogeny for illustration
plotSimmap(tree,col,fsize=0.6,node.numbers=FALSE,lwd=3, pts=FALSE)
library(mvMORPH)
# Simulated dataset
set.seed(14)
# Generating a random tree
tree<-pbtree(n=50)
# Setting the regime states of tip species
sta<-as.vector(c(rep("Forest",20),rep("Savannah",30))); names(sta)<-tree$tip.label
# Making the simmap tree with mapped states
tree<-make.simmap(tree,sta , model="ER", nsim=1)
col<-c("blue","orange"); names(col)<-c("Forest","Savannah")
# Plot of the phylogeny for illustration
plotSimmap(tree,col,fsize=0.6,node.numbers=FALSE,lwd=3, pts=FALSE)
col<-c("blue","orange"); names(col)<-c("Forest","Savannah")
# Plot of the phylogeny for illustration
plotSimmap(tree,col,fsize=0.6,node.numbers=FALSE,lwd=3, pts=FALSE)
names_traits=c("head.size","mouth.size")), model="BM1", nsim=1)
## Fitting the models
# BMM - Analysis with multiple rates
mvBM(tree, data)
# BM1 - Analysis with a unique rate matrix
fit1<-mvBM(tree, data, model="BM1", method="pic")
# BM1 constrained
fit2<-mvBM(tree, data, model="BM1", method="pic", param=list(constraint=TRUE))
tree
data
setwd("~/Documents/QMSS/continuous_character_evolution")
library(phytools) # read.newick
library(geiger) # fitContinuous
phoible_all <- read.csv("PHOIBLE_cleaned_with_tree_names.txt", header = TRUE, na.strings=c("", "NA"), sep = "\t")
plot(phoible_all$Consonants,phoible_all$Vowels)
glottolog_full_tree
glottolog_full_tree <- read.newick(file = "glottolog_full_tree_pruned.tree")
glottolog_full_tree
mod_l_1 <- fitContinuous(phy = glottolog_full_tree, dat = consonants, model = "BM")
mod_l_est <- fitContinuous(phy = glottolog_full_tree, dat = consonants, model = "lambda")
consonants <- phoible_all$Consonants
names(consonants) <- phoible_all$TreeName
mod_l_1 <- fitContinuous(phy = glottolog_full_tree, dat = consonants, model = "BM")
mod_l_est <- fitContinuous(phy = glottolog_full_tree, dat = consonants, model = "lambda")
mod_l_est
IE_tree
library(ape) # ace
library(phytools) # read.newick
# Next, let's read in the PHOIBLE data.
phoible_IE <- read.csv(file = "PHOIBLE_IE.txt", sep = "\t")
# Next, let's read in the IE tree.
IE_tree <- read.newick(file = "glottolog_IE.tree")
# What does R have to say about it?
IE_tree
ASE <- ace(x = phoible_IE$Consonants, phy = IE_tree, method = "ML")
ASE
plot.phylo(IE_tree, label.offset = 2)
tiplabels(phoible_IE$Consonants, width = 0.5)
nodelabels(round(ASE$ace, 0), width = 0.5)
plot.phylo(IE_tree, label.offset = 2)
tiplabels(phoible_IE$Consonants, width = 0.5)
nodelabels(round(ASE$ace, 0), width = 0.5)
plot.phylo(IE_tree, label.offset = 2)
tiplabels(phoible_IE$Consonants, width = 0.5)
nodelabels(round(ASE$ace, 0), width = 0.5)
plot.phylo(IE_tree, label.offset = 2)
tiplabels(phoible_IE$Consonants, width = 0.3)
nodelabels(round(ASE$ace, 0), width = 0.3)
